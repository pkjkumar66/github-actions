# This workflow will be used for build and release
name: Build & Release

# Controls when the workflow will run
on:
  # Allows to run this workflow manually from the Actions tab
  workflow_dispatch:

# Env variables which are used in this workflow
env:
  AWS_REGION: ap-south-1
  MAVEN_FLAGS: "-T 4C -B --no-transfer-progress"
  SERVICE_NAME: github-actions

# To run latest versions of a particular pr
concurrency: pkjkumar66-${{ github.ref }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # First job of the workflow, we called it "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout github repository
      - uses: actions/checkout@v2
        with:
          # use pkjkumar66 token for authenticate
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven

      - name: Set up Maven
        uses: stCarolas/setup-maven@v4.2
        with:
          maven-version: 3.8.2

      - name: Setup git config
        run: |
          git config --global user.email "pankajkumar130697@gmail.com"
          git config --global user.name "pkjkumar66"

      - name: Check the source ref
        id: ref
        env:
          HOTFIX: ${{ contains(github.ref, 'hotfix/') }}
          MASTER: ${{ github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' }}
        run: |
          echo ::set-output name=hotfix::$HOTFIX
          echo ::set-output name=master::$MASTER

      - name: Set release version
        id: set-version
        run: |
          if [[ "${{ steps.ref.outputs.master }}" == "true" ]]; then
             VERSION=$(mvn --non-recursive -q \
               build-helper:parse-version  exec:exec \
               -Dexec.executable=echo \
               -Dexec.args='${parsedVersion.majorVersion}.${parsedVersion.nextMinorVersion}.0')
          elif [[ "${{ steps.ref.outputs.hotfix }}" == "true" ]]; then
             QUALIFIER=$(mvn --non-recursive -q \
               build-helper:parse-version  exec:exec \
               -Dexec.executable=echo \
               -Dexec.args='${parsedVersion.qualifier}')
             if [[ -z "$QUALIFIER" ]]; then
               mvn ${{env.MAVEN_FLAGS}} -q build-helper:parse-version \
                 versions:set \
                 -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.nextIncrementalVersion}-SNAPSHOT \
                 versions:commit
               mvn ${{env.MAVEN_FLAGS}} -q scm:checkin -Dmessage="[ci skip] set snapshot version"
             fi
             VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout|sed 's/-SNAPSHOT//')
          else
             VERSION=${GITHUB_SHA::8}
          fi

          if [[ "x$VERSION" = "x" ]]; then
              echo "Not able to get the version"
              exit 1
          fi
          echo "::set-output name=version::$VERSION"
          echo "::notice title=Version::$VERSION"

      - name: Build for production release
        if: ${{ steps.ref.outputs.master == 'true' || steps.ref.outputs.hotfix == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: pkjkumar66
        run: |
          mvn -DskipTests ${{env.MAVEN_FLAGS}} -Darguments=-DskipTests \
            release:clean release:prepare \
            -DtagNameFormat="v@{project.version}" \
            -DscmCommentPrefix="[ci skip] " \
            -DreleaseVersion=${{ steps.set-version.outputs.version }} \
            -Dusername=${{ env.GITHUB_USER }} -Dpassword=${{ secrets.CLEARCI_TOKEN }}

      - name: Build for dev release
        if: ${{ steps.ref.outputs.master == 'false' && steps.ref.outputs.hotfix == 'false' }}
        run: mvn -DskipTests ${{env.MAVEN_FLAGS}} package

      - name: Upload artifacts
        uses: 'actions/upload-artifact@v2'
        with:
          name: artifacts-${{github.run_id}}
          path: |
            ${{ github.workspace }}/**/*.jar
          retention-days: 1

    outputs:
      version: ${{ steps.set-version.outputs.version }}

  build-Docker:
    runs-on: ubuntu-latest
    needs: ["build"]
    strategy:
      matrix:
        config: [{service: "pkjumar-http", file: "DockerfileHttp"}]
    steps:
      - name: Checkout out code
        uses: actions/checkout@v2

      - name: Fetch Artifacts
        uses: actions/download-artifact@v2
        with:
          name: artifacts-${{github.run_id}}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build Docker - ${{ matrix.module }}
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ${{ matrix.config.file }}
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ matrix.config.service }}:${{ needs.build.outputs.version }}
          push: true
          build-args: module=${{ matrix.module }}
          cache-from: type=gha, scope=${{ github.workflow }}
          cache-to: type=gha, mode=max, scope=${{ github.workflow }}
